// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/go/Dockerfile (1.948kB)
// templates/go/function/handler.go (345B)
// templates/go/function/handler.go.tmpl (177B)
// templates/go/go.mod (195B)
// templates/go/go.sum (518B)
// templates/go/main.go (1.192kB)

package fixturesfs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x4f\x23\x37\x10\xfe\xbe\xbf\x62\xb4\x87\xb8\x97\xca\x5e\x42\xaf\x2d\xcd\x29\x52\x73\x10\xd2\x53\x81\x45\x1b\x68\x7b\x2a\x15\xf2\xd9\xde\x5d\x8b\x5d\x8f\x65\x7b\x21\x94\xe3\xbf\x57\xde\x97\x24\xc0\x71\xd7\xe6\x53\xe6\x19\xcf\x33\xb3\xf3\xf2\x1c\x66\xe9\x31\x10\x62\x2a\xe6\x73\xb4\xf5\x64\xeb\xee\x6c\x9a\xcd\x67\x67\xa7\x47\xd3\xb3\xc3\x34\x3b\x1e\x93\x4a\xe9\x66\x99\xb0\x5a\xfc\xf8\xf6\x1e\x8a\x92\x5b\xaa\x30\x41\x23\x75\xce\x98\x4b\x30\x27\x37\xcc\xf3\x52\x60\x31\xde\xa1\x3f\xd3\xd1\x0f\xc0\x1c\x0c\x50\xf4\x94\xfe\xfd\xf9\x87\xa3\x83\xe7\xd8\xb1\x62\xba\x18\x8f\xe8\xee\x2e\x61\x95\x51\x5a\x06\xb2\x4f\x8d\xaa\x44\x14\x4d\xb3\x39\x3c\xac\xad\x85\x1e\xf0\x6d\x3c\x4a\x17\x1b\xc6\x34\xdb\xff\x35\x8a\xb2\xf3\x13\x60\xe6\x0a\x08\xd1\x48\x38\xe3\xa5\x04\x26\x04\x14\xca\x47\xd1\x7e\x7a\xfa\x11\x08\xc9\x2d\xd6\x93\xa1\x7a\x48\xf2\xf5\xdf\xc6\xd9\xe4\x93\xd2\x6b\xa8\xa5\xe3\x65\x8d\x02\xbe\x5b\x7e\xc9\xdf\x25\xac\xaf\x84\xb2\x40\x0c\x24\x05\x26\xce\xf2\xa4\x64\x5a\x54\xd2\x46\x7f\xa4\xd9\x6f\x07\x1f\xb2\x27\x78\x57\x0a\x05\xda\xc7\x5f\x43\x81\xb4\x46\x41\x7d\x6d\xaa\xfe\xff\x86\xe7\x06\xed\xd5\xca\x15\x8c\xc1\x57\x33\xa5\x69\x81\x9d\xaf\x37\xba\x2e\xce\xd3\xd1\x68\x74\x9c\x1e\x9c\x1f\xcd\x26\x31\xea\xb8\x07\x4f\xb3\xf4\xcf\x8f\x93\x78\x30\x0f\x8f\xa6\xf3\xc5\x60\xee\xcf\xd3\xcb\xd9\xc9\xf4\xfd\xd1\xec\x60\xb2\x13\xcd\x4e\x7e\x7f\x80\x6c\xdd\x6d\x58\xf7\x51\xf4\x02\xb2\x46\x03\x83\x02\xf3\xda\x03\xd3\x02\xe4\x92\x57\x8d\x90\xc0\xaa\x0a\xae\xa5\x16\x68\xa5\x00\x8e\x42\xd2\xf0\xf8\xfc\x04\xbc\x74\x1e\xc8\x3f\x10\x6f\xbd\xea\xa2\x48\x05\x5b\xaf\x72\xa5\x05\x50\x20\xfe\xd6\x48\xc8\x81\x68\x56\x4b\x78\xf9\x86\x16\xf8\x12\x88\x46\x0f\xc4\x30\x5f\x42\x4c\x93\x8e\x34\x79\x13\x3f\xc2\xf3\x46\x73\xaf\x50\xaf\x1f\xbc\x7e\x1d\xc3\xe7\xcf\x70\x07\x92\x97\x08\x71\xa8\xf4\x22\xee\x73\x3a\x20\x37\x17\x31\xa0\x86\x5b\x6c\x2c\xcc\xdb\x7d\x6c\xeb\x8c\xdf\x81\x5c\x2a\x0f\xa3\x77\x70\x1f\x3d\x37\xbb\x55\xb6\xaf\x4e\x7e\x5d\x93\xf3\xcc\x2b\xbe\x9a\x73\xef\x0f\x43\x0b\x4f\x36\xec\xa8\xef\x52\x81\xa0\xb4\xf3\xa1\x8b\xdd\xad\x50\xb4\x45\xb2\x4c\x3c\x62\xe5\x12\x5e\x8b\xa4\x40\x55\x1b\xb4\xde\xfd\x52\xb1\xd0\xd3\x75\x64\x8f\x03\xb9\xf9\x02\x31\x67\x7e\x03\x85\x01\x9e\xa7\xe9\x62\x25\x09\xe9\xe2\x1e\xe6\x69\x38\xa5\x15\x14\x8c\x70\xb6\xdd\xf8\x68\x42\x29\x05\xc2\xf1\x3a\xac\xf1\x73\xfb\xfd\xdf\x79\x2f\x22\x00\x08\xec\xad\x02\x00\x21\x95\xc8\x2b\x56\x38\x88\xdb\x41\xc5\x40\x70\x28\x3a\x5c\xcb\xff\x94\xb2\x4e\x60\xc6\xdf\xd3\xd1\x1e\x7d\x1b\x74\xc6\x95\xca\x84\x0f\x9f\x0a\x01\x1a\x35\x58\x44\x0f\x8d\x93\xb6\xdd\x60\x2e\xad\x77\xcf\x49\x08\x67\x24\xf8\x55\xae\x78\xe8\x7a\x5f\xf9\xf6\x76\x70\x16\x16\x1b\x03\x64\x01\xcc\x98\x1e\x6a\x49\xc9\x02\x48\xd1\x82\xcc\xb4\x79\x17\xa6\x52\xbe\x9d\xaf\x6d\xda\xfd\x70\xe0\x10\x7c\xc9\x7c\xd7\x80\x2b\xe5\x81\x33\x0d\xb6\xd1\xb0\x0d\x6d\xf2\xe8\x05\xf8\x52\x82\xb1\xf2\x5a\x61\xe3\x80\x63\x5d\x87\x62\x59\x29\x99\x00\xcc\xc1\xab\x5a\xd2\x47\xdb\x58\x62\x2d\x93\x90\x77\x55\x25\x2f\xf1\x46\xb7\xa5\xac\x9c\x1b\xf3\x5b\x43\x9b\x22\x39\xcc\xa4\x8d\x9d\xb4\xb1\x8f\xd6\x7c\x18\xcd\xfa\x47\xbf\xc5\xf0\x44\x44\xe1\xd1\xef\x9b\x0c\x5f\x3f\x35\x00\x18\x6e\xee\x7c\x31\xcb\xba\xce\x07\x35\xcb\x8d\x45\x2e\x9d\x9b\xc4\x74\x88\x8d\x5b\x47\x8d\x42\x4e\xe2\xd2\x7b\xd3\xd9\x8d\x71\xde\x4a\x56\x5f\x36\xb6\xea\xf0\x71\x92\x8c\x76\x7f\xa2\x3b\x74\x87\x8e\xc6\x7b\x3b\x7b\xbb\xdd\x43\x63\x65\xae\x96\x97\x15\x16\x6e\x12\xe7\xac\x72\xb2\xc3\xad\x64\xe2\xf6\x32\xc8\xd3\x24\x4e\x48\xd2\x9a\x71\x14\xed\x1f\x1f\xc0\x5f\x41\xaf\x86\x2f\x8f\xff\x8e\xfe\x0d\x00\x00\xff\xff\x57\x3c\x84\x22\x9c\x07\x00\x00")

func templatesGoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoDockerfile,
		"templates/go/Dockerfile",
	)
}

func templatesGoDockerfile() (*asset, error) {
	bytes, err := templatesGoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/Dockerfile", size: 1948, mode: os.FileMode(0644), modTime: time.Unix(1709784129, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0xa2, 0xad, 0xd7, 0xdb, 0xec, 0x19, 0xf4, 0x9d, 0x40, 0x9e, 0x3d, 0x27, 0x65, 0xd7, 0x64, 0x63, 0x4a, 0xfc, 0x27, 0x1d, 0xea, 0xa9, 0xc9, 0x95, 0x31, 0x3d, 0x7b, 0xda, 0x12, 0x86, 0xe5}}
	return a, nil
}

var _templatesGoFunctionHandlerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x31\x6b\xc3\x30\x10\x05\xe0\x59\xf7\x2b\x8e\x83\x82\x0d\xae\xbd\x07\x3a\x75\x68\x86\x4e\xc9\x54\x4a\x07\xd5\x3e\xbb\xc2\x96\xce\xd1\x9d\x4b\x42\xc8\x7f\x2f\x71\xd2\xd2\x49\x7a\xc7\xe3\x7d\xb3\x6f\x47\x3f\x30\xf6\x4b\x6a\x2d\x48\x02\x08\x71\x96\x6c\x58\x80\xa3\x56\x92\xf1\xd1\x08\x1c\xf5\xd1\x08\xc0\x69\x37\x22\x0d\xc1\xbe\x96\xcf\xba\x95\xd8\xec\x7c\xef\x4f\xfb\x93\x1a\x47\x6d\x7e\x37\x1e\x8d\xe3\x3c\x79\x63\x6d\xb4\x1b\x9b\x41\x08\x4a\x80\xa6\xc1\xad\x4f\xdd\xc4\xe8\xff\x34\x0c\xe9\x5b\x5a\xbf\xc2\xd7\xdb\xbd\x51\xb4\x76\xc4\x3b\x5e\x3f\xdf\xde\x0a\x27\x19\x06\xce\xa8\xdd\x58\xbf\xae\xdf\x0a\x33\x1f\xd6\xbc\xe3\xc3\xc2\x6a\x25\x16\xb7\xa4\xb3\x24\xe5\x0a\x39\x67\xc9\x25\x9e\x01\x5c\x66\x9d\x71\xf3\x84\xff\x0b\x67\x70\x8e\x22\xab\xfa\x81\x69\x83\x7d\xb4\x7a\x3f\xe7\x90\xac\x2f\x68\xcb\xd3\x24\x15\xbe\x48\x8d\x6f\xb2\xa0\xfa\xd0\x6d\xf0\x41\x69\x45\xdf\x29\xf9\xc8\xf4\x51\x56\xe0\x2e\xeb\xb8\x2d\x39\xe1\xd5\xa8\x30\x85\x09\x2e\xf0\x13\x00\x00\xff\xff\xfc\x4d\x02\xe6\x59\x01\x00\x00")

func templatesGoFunctionHandlerGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoFunctionHandlerGo,
		"templates/go/function/handler.go",
	)
}

func templatesGoFunctionHandlerGo() (*asset, error) {
	bytes, err := templatesGoFunctionHandlerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/function/handler.go", size: 345, mode: os.FileMode(0644), modTime: time.Unix(1709925332, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x58, 0x1d, 0x18, 0xc8, 0x4, 0xe7, 0xd0, 0x43, 0xe4, 0xc0, 0x39, 0xdc, 0xfe, 0xe, 0x9f, 0x47, 0x16, 0x13, 0xa7, 0xf2, 0xfb, 0xc2, 0x17, 0x9c, 0x3d, 0x5, 0x5d, 0x6e, 0x22, 0xb, 0xe9}}
	return a, nil
}

var _templatesGoFunctionHandlerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x0e\xc2\x30\x0c\x00\xe7\xf8\x15\x56\xc4\x00\x43\x9b\x1d\x89\x4f\xc0\x0b\x42\xea\x86\xaa\x4d\x52\xd5\x0e\xa2\x8a\xfc\x77\x06\xe8\x7c\xa7\xbb\xd5\x87\xd9\x47\xc2\xb1\xe6\x20\x53\xc9\x00\x53\x5a\xcb\x26\x78\x06\x63\x43\xc9\x42\x1f\xb1\x60\xec\x98\xc4\x02\x18\x1e\x66\xb4\x71\x92\x57\x7d\xf6\xa1\x24\x77\xf7\xa3\xdf\x1f\x3b\x0b\x25\x76\x47\xa3\x13\x4a\xeb\xe2\x85\xd8\xf1\x30\xbb\x58\x2c\x98\xd6\x3a\xdc\x7c\x8e\x84\xa7\xb7\x5f\x2a\xe1\xf5\x86\xfd\x6f\xc5\xaa\x60\x6c\x6b\x07\x51\xfd\xfb\x94\x07\x55\xb8\x00\xb4\x86\x3d\x97\xba\x05\x52\xfd\x06\x00\x00\xff\xff\xe9\xa5\x74\xc9\xb1\x00\x00\x00")

func templatesGoFunctionHandlerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoFunctionHandlerGoTmpl,
		"templates/go/function/handler.go.tmpl",
	)
}

func templatesGoFunctionHandlerGoTmpl() (*asset, error) {
	bytes, err := templatesGoFunctionHandlerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/function/handler.go.tmpl", size: 177, mode: os.FileMode(0644), modTime: time.Unix(1710267561, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x5d, 0x35, 0xea, 0xb, 0x1d, 0xe, 0x69, 0x61, 0xfa, 0xe3, 0x4c, 0x12, 0x12, 0x17, 0xbe, 0x70, 0x30, 0x10, 0x25, 0x61, 0x37, 0xbc, 0x3b, 0xef, 0x35, 0x8f, 0xa7, 0x77, 0xd, 0x5e, 0x11}}
	return a, nil
}

var _templatesGoGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xcb\x71\x86\x20\x10\x00\xe0\x73\xa8\x82\x63\x72\x00\x96\x35\x8e\xd2\x46\x52\xc1\x46\x56\x74\x14\x30\x3c\x9c\xb1\xfb\x9c\x73\xf8\x1b\xf8\x62\xf6\xfd\x64\xb9\x51\xf2\x27\x17\x21\x42\x96\x56\x23\x0a\x51\xf8\xb7\xef\x85\xe5\xbb\x78\x0b\x7b\xdb\xfa\x8f\x5e\x72\x34\x5f\xb4\xd2\xf3\xfd\xd4\xc6\xb1\x1a\x4e\x77\x0c\x45\x5d\x47\xa8\xf2\x06\x0d\x1a\x14\x02\x7e\xc2\x00\x13\x0c\x23\x8c\x4e\xd9\x19\xc9\x12\x79\x07\xf3\xfc\xda\x59\x7b\x5a\xda\x9e\x93\x6a\x1c\xaf\x93\x1a\x57\x53\xfd\x61\x42\xfe\xa7\x22\x3a\xb0\x60\xc1\xa9\xd5\x21\xb9\xc9\xdb\x71\x41\x14\x1f\xe2\x2f\x00\x00\xff\xff\xf9\xaa\xa8\x94\xc3\x00\x00\x00")

func templatesGoGoModBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoGoMod,
		"templates/go/go.mod",
	)
}

func templatesGoGoMod() (*asset, error) {
	bytes, err := templatesGoGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/go.mod", size: 195, mode: os.FileMode(0664), modTime: time.Unix(1709927925, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0xa4, 0x5b, 0x25, 0xf2, 0x89, 0x4e, 0x1, 0xc5, 0x2e, 0x2b, 0xe4, 0x2a, 0x5, 0x28, 0xc6, 0xbc, 0x3a, 0xb1, 0x51, 0x42, 0x51, 0x19, 0xf7, 0x6, 0xeb, 0x36, 0x4d, 0xe3, 0x79, 0x0, 0x84}}
	return a, nil
}

var _templatesGoGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd0\xbd\x72\xaa\x40\x1c\x40\xf1\xde\xa7\xb0\x67\x80\xff\x2e\x22\xec\x9d\xb1\xe0\x0a\x8a\x78\x19\xbc\x04\x91\xd8\xad\x7c\x89\xb0\x8b\xca\x8a\xe2\xd3\x67\x92\x2a\x29\xd2\x25\x4f\xf0\x3b\x73\xca\x4a\x1c\x6f\x07\x25\x6d\x99\x1a\xd2\x82\x0e\x2f\x43\x27\x72\xd6\xa9\x39\xef\x59\x79\x95\xcf\x75\xd9\x8d\x7b\x50\x40\x01\x19\x03\x9e\x80\x06\x06\x68\x3a\xe8\x44\x46\x26\xa6\x88\xd2\x8c\x80\x69\x8e\x8f\xe8\x4f\x63\x43\xff\x98\xea\xd6\xe5\x62\xc7\xe7\x85\xf3\x90\xc2\x66\xba\xf0\x50\x30\xa8\x3c\x91\xfe\xba\x6a\xe4\xf6\xd1\xbf\x84\x13\x7d\xee\xcf\x46\x3f\xc3\xaa\x65\xab\xb0\x36\x7b\xd7\x37\xa7\x7a\x4d\x18\x64\xde\x12\xb5\x06\x8f\x99\xf0\xa3\x6d\x9e\x06\xcd\xeb\x33\x8c\x4f\x89\x21\x35\xbb\xe6\x50\xcf\x99\x24\x98\xf5\xbd\x5e\xdc\x78\x2a\xaa\x96\xcb\x22\x67\xe7\x86\x8a\xbc\x53\xbb\xac\x56\xcb\xf6\x4b\x0b\xc6\x04\x10\x20\x20\x72\x41\x30\x25\x46\x86\xf4\x14\xe3\x8f\x05\x49\x60\x15\x7d\x85\xed\x94\xfa\xdc\x24\x6e\x79\xdf\x38\x0e\xd7\xf6\xb6\xdb\x7b\xf1\xd6\x59\xde\x56\x35\xbd\x78\xd6\x13\xee\xe9\xef\x44\x7c\x1a\xe2\x9e\x98\x76\xdf\xe1\x63\x24\x44\x05\x16\x5e\x15\xff\x79\x38\x4d\xba\x49\xf2\xdc\x5b\x69\x10\x4f\x30\x11\xee\xb5\x59\xfb\xbb\xa1\x9b\x8d\xde\x02\x00\x00\xff\xff\x8d\x87\xf4\xce\x06\x02\x00\x00")

func templatesGoGoSumBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoGoSum,
		"templates/go/go.sum",
	)
}

func templatesGoGoSum() (*asset, error) {
	bytes, err := templatesGoGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/go.sum", size: 518, mode: os.FileMode(0664), modTime: time.Unix(1709783722, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0xa7, 0x98, 0xa2, 0x56, 0x65, 0xee, 0x31, 0xa1, 0x31, 0x0, 0x53, 0xb5, 0xae, 0x59, 0x82, 0x6e, 0xb9, 0x7d, 0xa2, 0x5c, 0x43, 0xc2, 0x44, 0x48, 0xab, 0x47, 0x6e, 0x62, 0xef, 0xa4, 0x5c}}
	return a, nil
}

var _templatesGoMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xd1\x6a\xe3\x3a\x10\x7d\xd6\x7c\xc5\x5c\x3f\x14\xfb\x92\x5a\xbd\xaf\x81\x14\x2e\xb4\xbb\x5b\xca\x6e\x4b\x53\xda\xc7\x45\xb1\xc7\x8e\x88\x2c\x19\x69\x9c\xb6\x2c\xf9\xf7\x45\x76\xec\x3a\x85\x2e\xec\x4b\x90\x26\xe7\x9c\x39\x73\x46\x96\x12\x55\xa9\x5a\xa6\x12\x2b\xef\x1a\xdc\x32\xb7\x61\x29\x65\xad\x79\xdb\x6d\xf2\xc2\x35\xd2\xb5\x64\x2b\xa5\x82\xac\x9d\x51\xb6\x3e\x8f\x90\x73\xa6\xa6\x35\x8a\x49\x6e\x8c\xdb\xc8\x46\x05\x26\x2f\xa7\xe2\x0c\x29\x1b\xa5\x6d\x5e\x3b\x90\x12\xef\xbc\xae\xb5\x55\x06\x8d\x2e\xc8\x06\x5a\xe2\xf7\x9b\x47\x68\x55\xb1\x53\x35\x61\x04\x02\xe8\xa6\x75\x9e\x31\x05\x91\x54\x0d\x27\x20\x12\x17\xe2\x6f\x60\x5f\x38\xbb\x8f\x47\xd6\x0d\x25\x00\x22\xd9\x2a\x5b\x1a\xf2\xb2\xea\x6c\xc1\xda\xd9\x58\x0c\xe5\x0e\x93\x99\xfb\x07\x55\xa9\xb7\xf5\x5b\x60\x6a\xc2\x04\x9c\xec\x07\x19\xca\x9d\xac\x5d\x2f\xf7\x19\x8b\xec\xbe\xa9\xfd\x79\xbb\xab\x83\x0c\xba\xb6\xca\x84\x04\x32\x80\xc2\xd9\xc0\x58\x52\xa5\x3a\xc3\x8f\xba\x21\xd7\x31\xae\xf0\xbf\x0b\xfc\x17\xa3\xc7\x7c\x4d\x85\xb3\x25\x40\x6c\xdb\x8f\x97\x66\xf8\x0b\x84\x27\x55\x8e\xf0\xe5\x0a\x5b\xe5\x03\xdd\x58\xbe\xf3\x57\x9d\x57\xd1\xde\x93\x32\x1d\xa5\x2e\xe4\x5f\x89\xc9\xee\xd3\x24\x32\x7e\xf2\x40\x49\xb2\xc5\x87\x9e\x19\x88\x17\xaf\x99\xfe\x4e\xb3\xa7\xfc\x49\x14\xc4\x18\xd7\xfa\xea\x76\x81\xe4\x7d\x54\x0e\xe5\x2e\xff\x41\x2f\x5f\xde\xff\x4a\x41\xc4\xd4\xf3\x67\xcd\xdb\x87\xf7\xd1\xd2\xd9\x98\xd9\x62\x86\x79\x9e\x79\x4d\xe7\xc6\x4f\x50\xdf\x86\xdd\xa6\xa3\x87\x7c\x28\x64\x19\x08\x5d\xf5\x66\xfe\x59\xa1\xd5\x26\x06\x2a\xaa\x86\xf3\x7b\xaf\x2d\x1b\x9b\x26\xd7\xde\x3b\x8f\x85\x27\xc5\xda\xd6\x38\x0a\xe0\xfa\xea\x76\x89\x49\x3f\x48\x06\x42\x78\xe2\xce\x5b\x10\x07\x00\x51\xf0\x6b\x3f\xdb\xb0\xdc\x7c\x4d\xdc\xb5\xeb\xfe\x32\xda\xf8\x10\x47\xfe\xd0\xd9\xb4\xe0\xd7\x0c\x0e\xc7\xf5\x7e\x96\xf8\x5e\x19\x0c\xec\xb5\xad\x17\x58\x29\x63\x36\xaa\xd8\x0d\xaf\x63\xc4\x65\xa7\xd7\x38\x90\xae\xd0\x90\x8d\xdc\x0c\x2f\xf1\xa2\x9f\xb1\x6f\x50\x3e\x29\xb3\x18\x7a\x5d\x1f\xf7\x31\x7c\x17\xf9\xff\xec\x74\x4f\x00\x11\xe9\x13\x64\x35\xa4\x74\x76\x86\x93\x00\x5e\xae\x8e\x9a\xc7\x10\x4e\x0d\xa4\x13\x30\xfb\xf0\x90\x85\x38\x0c\x79\x95\x47\xe8\x02\xc7\xd3\xd1\x4d\x8f\xbe\x8f\xfc\x49\x6d\xf0\xa4\xab\x13\xe8\x6c\x77\x47\x0b\x63\x36\xb1\xc1\x58\x1b\x19\x70\x80\xdf\x01\x00\x00\xff\xff\x1d\x7b\x64\x11\xa8\x04\x00\x00")

func templatesGoMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoMainGo,
		"templates/go/main.go",
	)
}

func templatesGoMainGo() (*asset, error) {
	bytes, err := templatesGoMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/main.go", size: 1192, mode: os.FileMode(0644), modTime: time.Unix(1709927928, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x5c, 0x88, 0xf8, 0x59, 0x56, 0x65, 0x5b, 0x27, 0x51, 0x7d, 0x1, 0x6, 0xa5, 0xb2, 0xd2, 0x43, 0x83, 0x61, 0xdb, 0xac, 0xe5, 0x85, 0x3b, 0xe4, 0x29, 0xd7, 0x8e, 0x74, 0x43, 0x92, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/go/Dockerfile":               templatesGoDockerfile,
	"templates/go/function/handler.go":      templatesGoFunctionHandlerGo,
	"templates/go/function/handler.go.tmpl": templatesGoFunctionHandlerGoTmpl,
	"templates/go/go.mod":                   templatesGoGoMod,
	"templates/go/go.sum":                   templatesGoGoSum,
	"templates/go/main.go":                  templatesGoMainGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"go": {nil, map[string]*bintree{
			"Dockerfile": {templatesGoDockerfile, map[string]*bintree{}},
			"function": {nil, map[string]*bintree{
				"handler.go":      {templatesGoFunctionHandlerGo, map[string]*bintree{}},
				"handler.go.tmpl": {templatesGoFunctionHandlerGoTmpl, map[string]*bintree{}},
			}},
			"go.mod":  {templatesGoGoMod, map[string]*bintree{}},
			"go.sum":  {templatesGoGoSum, map[string]*bintree{}},
			"main.go": {templatesGoMainGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
