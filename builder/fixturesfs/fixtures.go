// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/go/Dockerfile (1.411kB)
// templates/go/function/dummy.go (223B)
// templates/go/function/handler.go.tmpl (177B)
// templates/go/go.mod (320B)
// templates/go/go.sum (1.344kB)
// templates/go/main.go (1.192kB)

package fixturesfs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xef\x4f\xe4\x36\x10\xfd\xee\xbf\x62\x14\x4e\x7c\xa9\x6c\xef\x72\xd7\x2b\x5d\x29\x52\xf7\xd8\x65\x7b\xea\x42\x50\x16\xda\x9e\xda\x0a\x19\xdb\x49\x2c\x1c\xdb\xf2\x0f\xa0\x3a\xf1\xbf\x57\x4e\x58\x58\x0e\xe8\x7d\xcb\xbc\x89\x67\xde\xcc\x7b\x73\x5c\x57\x27\x80\xb1\xd3\x2c\x36\xd6\xf7\xe5\xbb\xaf\xe7\xf3\x7a\xb5\x3c\x3f\x5b\xcf\xcf\x8f\xab\xfa\x64\x86\xb5\x32\xe9\x8e\xb2\x5e\x7c\xfc\x70\x0f\x6d\xc7\x3d\x51\x96\x5a\x27\x4d\xc3\x58\xa0\xb6\xc1\xb7\x2c\xf2\x4e\xd8\x76\x36\x21\x3f\x93\xe9\x8f\xc0\x02\x6c\x21\xf4\xb2\xfc\xa7\x8b\xcf\xeb\xc5\x5b\xd5\xad\x66\xa6\x9d\x4d\xc9\xc1\x01\x66\xda\x29\x23\x73\xb1\xab\xa4\xb4\x40\xa8\xbe\x38\x85\xd6\x82\x32\x21\x32\xad\x01\xdf\x40\xab\x62\x97\xae\x08\xb7\x3d\x55\x86\xa7\x8f\x29\xd0\xd6\xaa\xde\x59\x1f\x03\xf6\xf2\x46\x05\xe9\xe9\xcd\xfb\x5f\x34\x8b\x32\x44\x84\xe6\xf5\x0a\x9e\x4f\x37\x40\xcf\x18\xed\xfc\x54\x6d\x76\x82\x79\x7d\xf4\xeb\xc8\x81\xb9\x6b\xc0\xd8\x58\xcc\x19\xef\x24\x30\x21\x32\x11\x84\x8e\xaa\xb3\x2f\x80\x71\xe3\x6d\x5f\x6e\xe7\x07\xda\x3c\x7d\xa6\xe0\xe9\x95\x32\x4f\xd0\x50\x8e\x77\xbd\x15\xf0\xc3\xdd\x6b\xf9\xb1\x61\x7f\x2d\x94\x07\xec\x80\xb6\x96\x06\xcf\x69\xc7\x8c\xd0\xd2\xa3\x3f\xaa\xfa\xb7\xc5\xe7\xfa\x05\x3e\x52\x21\x40\xd0\x38\xf3\xaa\x9a\x4e\xa7\x27\xd5\xe2\x62\xbd\x2c\x0b\x6b\x8a\x07\xf0\xac\xae\xfe\xfc\x52\x16\xdb\xf0\x78\x3d\x5f\x6d\xb6\xe1\xd1\xaa\xba\x5c\x9e\xce\x3f\xad\x97\x8b\x72\x82\x96\xa7\xbf\x3f\x43\xde\x7d\xdd\x89\xee\xb7\xd2\x7c\xb3\x79\xc0\x59\x71\x16\x01\x7b\xc9\x93\x0f\xea\x46\x02\xf6\x3d\x4e\x26\x05\x29\x80\x50\x42\x32\xc1\xb7\x86\xc8\x35\x57\x55\xb5\x79\x74\x64\xb5\xb9\x87\x55\x95\x75\x78\x84\x72\x70\x0f\x7f\x23\x00\xc8\xd6\x18\x8c\x02\x18\x6b\xd1\x68\xd6\x06\x28\x70\x00\x7c\x5b\x00\xb6\xf0\x50\x95\x5c\x29\x33\xac\x65\x6f\x0f\x8e\x95\x61\x1a\x54\xcf\x5a\xf9\x8a\x4d\xff\xf7\x0a\x46\x6f\xce\xde\x93\xe9\x21\xf9\x90\x2d\x1a\x3a\xe5\x10\xda\x83\xb9\x10\x60\xac\x01\x6f\x6d\x84\x94\x97\xc0\x8c\x00\x2e\x7d\x0c\x6f\x79\x87\x33\x9c\xf3\xaa\x51\x3c\xdb\xf4\x61\x9a\xfd\xfd\x9c\x6c\xbd\x4d\x0e\xf0\x06\x98\x73\x0f\xd0\x50\x14\x6f\x00\xb7\x03\xc8\xdc\xd0\x77\xe3\xb4\x8a\xc3\x69\xf8\xc4\xa3\xb2\x26\x40\xb0\x10\x3b\x16\xc7\xa5\x5c\xab\x08\x9c\x19\xf0\xc9\xc0\x3e\x0c\xcd\xd1\x1e\xc4\x4e\x82\xcb\x6a\xd9\x14\x80\xdb\xbe\xcf\x64\x59\x27\x99\x00\xdb\x40\x54\xbd\x24\xdf\x18\xb0\xb3\xbd\xa4\xb9\xef\x23\x4b\xde\xd9\x5b\x33\x50\x79\x4c\xee\x68\xfa\x04\xed\x5e\xc7\x56\xa7\xe1\x6d\x39\xbc\x7d\x2e\x3e\xdd\x95\x6b\xab\xdd\xf7\x4a\xbc\x38\x1f\xc8\x4a\x5f\x6c\x96\xf5\xb8\xa5\x6c\xe2\xc6\x79\xcb\x65\x08\x65\x41\xb6\x3d\x8a\x21\xd1\x5b\x21\xcb\xa2\x8b\xd1\x8d\x71\x72\x21\x7a\xc9\xfa\xcb\xe4\xf5\x88\xcf\x28\x9d\x1e\xfc\x44\x26\x64\x42\xa6\xb3\xc3\xc9\xe1\xc1\xf8\xa3\xf3\xb2\x51\x77\x97\xda\xb6\xa1\x2c\x1a\xa6\x83\x1c\x71\x2f\x99\xf8\xf7\xd2\xb1\xd8\x95\x05\xc5\x74\x08\x0b\x84\x8e\x4e\x16\xf0\x57\x41\x9e\x48\x16\xff\xa0\xff\x02\x00\x00\xff\xff\x43\x71\x78\xf9\x83\x05\x00\x00")

func templatesGoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoDockerfile,
		"templates/go/Dockerfile",
	)
}

func templatesGoDockerfile() (*asset, error) {
	bytes, err := templatesGoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/Dockerfile", size: 1411, mode: os.FileMode(0644), modTime: time.Unix(1710271609, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x90, 0x90, 0x12, 0xbe, 0x7e, 0x74, 0x7, 0xb1, 0xce, 0x47, 0xdb, 0x4c, 0xe9, 0x46, 0x2b, 0x16, 0xec, 0x1, 0x5, 0x3a, 0xf, 0xa4, 0x38, 0x1e, 0xe4, 0xb0, 0x9d, 0xc4, 0xa4, 0x6b, 0x82}}
	return a, nil
}

var _templatesGoFunctionDummyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x4b\x6e\xc3\x30\x0c\x44\xd7\xe6\x29\x08\xaf\x6c\xc0\xb5\x0f\xd1\x4d\x17\x5d\xa5\x27\x50\x65\x46\x15\xf4\xa1\x42\x52\x40\x82\x20\x77\x2f\x1a\xb7\x40\x57\x33\x0f\x0f\x33\xcd\xf9\xe4\x02\xe1\xb9\x57\x6f\x91\x2b\x40\x2c\x8d\xc5\x70\x82\x61\xf4\x5c\x8d\xae\x36\x02\x0c\xba\x27\x1c\x43\xb4\xaf\xfe\xb9\x7a\x2e\xdb\xc9\x9d\xdd\xed\xe3\xa6\x46\x45\xb7\xbf\xf1\x8b\x51\x69\xd9\x19\xe9\xa6\x7b\xda\x02\x8f\x30\x03\xfc\x58\x7c\x73\x75\xcf\x34\x79\xbb\xe2\xef\xeb\xfa\x7a\xe4\x82\x99\x43\x20\x41\xdd\xd3\xfa\xfe\xac\x0b\x0a\x5d\x9e\x7c\xa2\x4b\x27\xb5\x19\xa7\x83\xb4\x71\x55\x5a\x90\x44\x58\x66\xbc\x03\x0c\x42\xd6\xa5\xe2\x7f\x7f\x7f\x2c\x58\x63\x86\x07\x7c\x07\x00\x00\xff\xff\x55\xa4\x91\xb2\xdf\x00\x00\x00")

func templatesGoFunctionDummyGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoFunctionDummyGo,
		"templates/go/function/dummy.go",
	)
}

func templatesGoFunctionDummyGo() (*asset, error) {
	bytes, err := templatesGoFunctionDummyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/function/dummy.go", size: 223, mode: os.FileMode(0644), modTime: time.Unix(1710269487, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xa7, 0x97, 0xfc, 0x78, 0x41, 0xdb, 0xf4, 0x25, 0x58, 0xd1, 0x41, 0x3b, 0xb4, 0x88, 0x11, 0xd1, 0xa6, 0x4c, 0x64, 0xaf, 0xcc, 0xbd, 0xf3, 0xf7, 0x2c, 0xbe, 0x1a, 0x29, 0xee, 0x53, 0xb7}}
	return a, nil
}

var _templatesGoFunctionHandlerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x0e\xc2\x30\x0c\x00\xe7\xf8\x15\x56\xc4\x00\x43\x9b\x1d\x89\x4f\xc0\x0b\x42\xea\x86\xaa\x4d\x52\xd5\x0e\xa2\x8a\xfc\x77\x06\xe8\x7c\xa7\xbb\xd5\x87\xd9\x47\xc2\xb1\xe6\x20\x53\xc9\x00\x53\x5a\xcb\x26\x78\x06\x63\x43\xc9\x42\x1f\xb1\x60\xec\x98\xc4\x02\x18\x1e\x66\xb4\x71\x92\x57\x7d\xf6\xa1\x24\x77\xf7\xa3\xdf\x1f\x3b\x0b\x25\x76\x47\xa3\x13\x4a\xeb\xe2\x85\xd8\xf1\x30\xbb\x58\x2c\x98\xd6\x3a\xdc\x7c\x8e\x84\xa7\xb7\x5f\x2a\xe1\xf5\x86\xfd\x6f\xc5\xaa\x60\x6c\x6b\x07\x51\xfd\xfb\x94\x07\x55\xb8\x00\xb4\x86\x3d\x97\xba\x05\x52\xfd\x06\x00\x00\xff\xff\xe9\xa5\x74\xc9\xb1\x00\x00\x00")

func templatesGoFunctionHandlerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoFunctionHandlerGoTmpl,
		"templates/go/function/handler.go.tmpl",
	)
}

func templatesGoFunctionHandlerGoTmpl() (*asset, error) {
	bytes, err := templatesGoFunctionHandlerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/function/handler.go.tmpl", size: 177, mode: os.FileMode(0644), modTime: time.Unix(1710267561, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x5d, 0x35, 0xea, 0xb, 0x1d, 0xe, 0x69, 0x61, 0xfa, 0xe3, 0x4c, 0x12, 0x12, 0x17, 0xbe, 0x70, 0x30, 0x10, 0x25, 0x61, 0x37, 0xbc, 0x3b, 0xef, 0x35, 0x8f, 0xa7, 0x77, 0xd, 0x5e, 0x11}}
	return a, nil
}

var _templatesGoGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3b\x72\xc3\x20\x14\x40\xd1\x3a\xac\x82\x32\x2e\xf8\x08\x49\x96\xd8\x46\xb2\x82\x67\x78\x02\xc6\x7c\x14\x40\x9e\xd1\xee\x33\x29\x52\xb8\xd0\x02\xee\x99\x9b\x8a\x3d\x22\x52\x0f\xd9\x46\xac\x84\xb8\x42\x07\xae\x14\x21\x15\x7f\x8e\x50\x91\x7e\x92\x0f\x17\xba\x3f\x1e\xdc\x94\x24\xbe\x60\x83\xf3\xfb\x6c\x1d\x53\x13\x98\x5f\xc9\x55\xb6\x3f\x5d\xa3\x2f\xc9\x25\x97\x4c\x49\x35\xc9\x51\x2e\x72\x9c\xe5\xac\xd9\xb0\x2a\x18\x00\xac\x96\xeb\x7a\xed\x6c\x47\x36\x3d\x94\xcc\x3a\xa6\x3d\x42\xc7\x26\x9a\x7d\x0a\x57\xde\xd5\x41\x0d\xeb\xb4\xa8\x3b\xd3\x9b\x35\xb0\xdd\xd5\xa8\x17\x4d\x6e\x57\xab\x1e\x9a\x0f\xa6\xd4\x5d\xb8\xc2\x4c\x44\xc8\xbe\xf7\xfd\x8f\x9c\xb9\xa2\x42\xd0\x90\x6d\xa8\x68\xfa\x75\x55\xb1\xd7\x13\x1e\x11\xff\xcb\x85\x4f\x6f\xe5\x8d\xfc\x06\x00\x00\xff\xff\x37\xf5\xa4\x94\x40\x01\x00\x00")

func templatesGoGoModBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoGoMod,
		"templates/go/go.mod",
	)
}

func templatesGoGoMod() (*asset, error) {
	bytes, err := templatesGoGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/go.mod", size: 320, mode: os.FileMode(0664), modTime: time.Unix(1710269427, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0x27, 0x40, 0x78, 0x5e, 0x97, 0x7, 0xa5, 0x45, 0xf1, 0x5c, 0x49, 0x99, 0x92, 0x8d, 0xed, 0x65, 0x7e, 0xcb, 0xe8, 0x74, 0x29, 0x4, 0x91, 0x98, 0xc0, 0x5, 0x54, 0xa5, 0x5, 0x46, 0xcd}}
	return a, nil
}

var _templatesGoGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd2\xcd\xce\xaa\x38\x1c\xc7\xf1\xfd\xb9\x8a\x67\x4f\xb4\xe5\x1d\x26\x39\x0b\x44\x11\x05\xdf\x11\xc1\x1d\x42\x79\x2d\x14\x69\x55\x78\xae\x7e\x42\x26\x93\xe8\x62\x4e\xce\x24\x33\x37\xf0\xf9\x7f\xfb\x4b\xb3\x82\xe5\x8f\xdb\x34\x26\x35\x38\x46\x69\x34\x9c\x06\xca\x50\x4d\x01\x6a\x9e\x75\xd6\x4d\xda\x2a\xa3\x5f\x4f\x38\x85\x53\x38\x11\xa0\x20\x41\x11\xaa\x50\x94\xa1\xac\x4f\x78\x4d\x88\xf8\x28\x4a\x74\xa8\x69\x5f\x39\xff\x07\x9e\xc3\x67\xaf\xc8\xc6\xfd\x3e\xf7\x5b\x6b\xd1\x73\x47\xac\x58\x6b\x7e\x37\x80\x26\xe0\x66\x36\xf0\xec\xa7\xe7\x06\x8d\x2e\x9b\x9b\x9f\x3f\xfe\x9b\xb3\x20\x23\xd3\x9a\x24\xe3\xf5\x7d\x59\x39\x7a\x0d\x93\xf5\x92\x27\x6a\xe3\xd7\x6c\xe3\x9d\x51\xbc\xc3\xe1\xf7\xd1\x2f\x03\x95\xc3\x17\x7c\xab\xcc\x9a\x63\xb5\xf1\xcf\xd7\xd3\x47\x13\xb3\x82\x34\x13\x86\xea\x16\x47\x0c\x51\x40\x93\x0a\x64\xe4\xb3\x85\x17\x78\x4d\x52\x05\x65\xa2\xa7\x49\x1c\xa5\x8a\x20\xea\xaa\x3e\x46\x70\xa5\x68\xac\x9b\xa8\xf3\x6b\xab\x67\x68\x39\x68\xbb\x07\x55\x10\xd9\x84\xd5\x5d\xf7\xa9\xd7\x55\xab\x3b\x7d\x96\x7b\x54\xff\x5f\x11\x6f\x83\x0c\x9b\xbd\xad\xe2\xfe\x7e\x8e\x41\xa8\xb9\x66\x5e\x55\x3a\xa7\x2c\x8e\xd0\x9d\x21\x1c\xec\x64\x3c\x7f\x01\x8d\xb6\x14\x21\x40\x3f\x5a\x92\xe8\x89\xe2\x2c\x07\x19\x99\xd0\x16\xbd\xbe\x9e\xfc\x94\x9f\xf2\x6f\xf0\x5a\x0d\xb5\x30\xbe\x08\xdb\x22\xa7\x59\xed\x13\x50\x3f\x45\x6c\xbc\x30\xa0\xd5\x6e\x2b\x15\xae\x5d\x9e\xe8\x8a\x8b\x65\x5b\xd4\x3e\xe0\x3c\xa2\x79\x11\x93\xae\x1d\xe9\x18\xa3\xa8\xc9\x19\x6b\xc7\x47\xc9\x53\x61\x84\xa1\x28\x5b\x4e\xb8\xba\x94\xf5\xd9\x1d\xac\xe3\xcc\xd9\x53\xcd\x9b\x1d\x48\x01\x7b\x25\xd1\x97\x52\x1f\xeb\x0d\x0a\xd6\x17\xe3\x7a\xf8\x7d\xf8\x2d\xbc\xda\x81\x70\x8e\xf7\x9a\xcb\x8b\x92\xb2\x50\x4e\x24\x79\x71\xfb\xae\x9d\x9d\x7c\x09\x9c\x48\x6f\x06\xcb\x50\x99\xdd\xb7\x96\x27\xfd\x22\x3c\x8f\x31\xc9\x46\x5b\xff\x2b\xda\x5c\x2a\xde\x42\xb6\x75\xb0\x0e\xa8\x75\x59\x9b\x29\x59\xf9\xad\x63\xad\x2a\x0b\x29\x03\x5d\x3c\xec\xa2\x6b\xa5\x79\x6f\x52\x7b\xf5\x7b\xe8\x5b\xb0\x6c\x9e\xb9\x28\x73\x8b\x41\x5c\xab\x5b\xf5\x50\xda\x8e\x9c\x40\xd9\xe9\x97\xf4\x11\x14\x07\xb7\x2b\x0d\x68\xab\x51\x5c\x0a\xf8\x17\x83\x74\x88\x75\x43\x74\xc3\xe8\xef\x51\xd4\xa9\x34\xe2\xd7\x43\xe6\x27\xad\x97\x18\xae\x7a\x69\x37\xab\x97\xfb\x6d\xa6\xb7\x08\xef\xe2\xd3\x39\xa9\xe6\xd7\xa6\x3d\x3f\x45\xc0\xcd\xfa\x6f\xcb\xf8\x77\xf8\xfb\x57\x19\x40\xb6\x0f\x8d\xa4\xbc\xa7\xe9\x15\x0c\xd6\xd2\xb4\x7c\x21\x21\x2b\xf9\x55\x32\x9b\x47\xaf\x8d\xfe\xd0\x8a\xd0\x2f\x59\xf0\xb9\x78\x5b\xa3\xef\xa8\x4b\xc6\x0b\x49\x91\xa6\xb8\xb8\x8d\xdf\x10\x4e\xe1\x9b\x5d\x38\xb6\xaa\x56\xc4\xca\xc3\xde\x73\xf8\x36\x3e\x36\x95\x53\xdd\x53\x8f\x64\xf4\x96\xa9\xd9\x75\xeb\x87\x12\x3d\xce\xc3\x2b\x90\x3e\x6c\xca\x3a\xc4\xe2\xbc\x03\x0c\x51\x56\xa4\xc3\x28\x0b\x1f\xb3\x47\xda\xae\x39\xc6\xc5\x4d\x6a\xf2\x1c\xee\xa2\xa3\xe1\x73\x21\xa3\x9a\x5a\x39\xc9\x1d\xee\xf7\x6a\x1b\xa4\x83\x52\xcd\xab\xb3\x4f\x7f\xfe\xf8\x33\x00\x00\xff\xff\x7b\x0e\x96\xfc\x40\x05\x00\x00")

func templatesGoGoSumBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoGoSum,
		"templates/go/go.sum",
	)
}

func templatesGoGoSum() (*asset, error) {
	bytes, err := templatesGoGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/go.sum", size: 1344, mode: os.FileMode(0664), modTime: time.Unix(1710269448, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xaa, 0x89, 0xc0, 0xa5, 0xf9, 0x56, 0x39, 0xc5, 0x52, 0x91, 0x46, 0xc7, 0xb1, 0x29, 0xbc, 0xa6, 0xb6, 0xb7, 0xf2, 0x7d, 0x13, 0x1e, 0x73, 0xa6, 0xc2, 0x9c, 0xe8, 0xfe, 0xda, 0x4, 0xd6}}
	return a, nil
}

var _templatesGoMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xd1\x6a\xe3\x3a\x10\x7d\xd6\x7c\xc5\x5c\x3f\x14\xfb\x92\x5a\xbd\xaf\x81\x14\x2e\xb4\xbb\x5b\xca\x6e\x4b\x53\xda\xc7\x45\xb1\xc7\x8e\x88\x2c\x19\x69\x9c\xb6\x2c\xf9\xf7\x45\x76\xec\x3a\x85\x2e\xec\x4b\x90\x26\xe7\x9c\x39\x73\x46\x96\x12\x55\xa9\x5a\xa6\x12\x2b\xef\x1a\xdc\x32\xb7\x61\x29\x65\xad\x79\xdb\x6d\xf2\xc2\x35\xd2\xb5\x64\x2b\xa5\x82\xac\x9d\x51\xb6\x3e\x8f\x90\x73\xa6\xa6\x35\x8a\x49\x6e\x8c\xdb\xc8\x46\x05\x26\x2f\xa7\xe2\x0c\x29\x1b\xa5\x6d\x5e\x3b\x90\x12\xef\xbc\xae\xb5\x55\x06\x8d\x2e\xc8\x06\x5a\xe2\xf7\x9b\x47\x68\x55\xb1\x53\x35\x61\x04\x02\xe8\xa6\x75\x9e\x31\x05\x91\x54\x0d\x27\x20\x12\x17\xe2\x6f\x60\x5f\x38\xbb\x8f\x47\xd6\x0d\x25\x00\x22\xd9\x2a\x5b\x1a\xf2\xb2\xea\x6c\xc1\xda\xd9\x58\x0c\xe5\x0e\x93\x99\xfb\x07\x55\xa9\xb7\xf5\x5b\x60\x6a\xc2\x04\x9c\xec\x07\x19\xca\x9d\xac\x5d\x2f\xf7\x19\x8b\xec\xbe\xa9\xfd\x79\xbb\xab\x83\x0c\xba\xb6\xca\x84\x04\x32\x80\xc2\xd9\xc0\x58\x52\xa5\x3a\xc3\x8f\xba\x21\xd7\x31\xae\xf0\xbf\x0b\xfc\x17\xa3\xc7\x7c\x4d\x85\xb3\x25\x40\x6c\xdb\x8f\x97\x66\xf8\x0b\x84\x27\x55\x8e\xf0\xe5\x0a\x5b\xe5\x03\xdd\x58\xbe\xf3\x57\x9d\x57\xd1\xde\x93\x32\x1d\xa5\x2e\xe4\x5f\x89\xc9\xee\xd3\x24\x32\x7e\xf2\x40\x49\xb2\xc5\x87\x9e\x19\x88\x17\xaf\x99\xfe\x4e\xb3\xa7\xfc\x49\x14\xc4\x18\xd7\xfa\xea\x76\x81\xe4\x7d\x54\x0e\xe5\x2e\xff\x41\x2f\x5f\xde\xff\x4a\x41\xc4\xd4\xf3\x67\xcd\xdb\x87\xf7\xd1\xd2\xd9\x98\xd9\x62\x86\x79\x9e\x79\x4d\xe7\xc6\x4f\x50\xdf\x86\xdd\xa6\xa3\x87\x7c\x28\x64\x19\x08\x5d\xf5\x66\xfe\x59\xa1\xd5\x26\x06\x2a\xaa\x86\xf3\x7b\xaf\x2d\x1b\x9b\x26\xd7\xde\x3b\x8f\x85\x27\xc5\xda\xd6\x38\x0a\xe0\xfa\xea\x76\x89\x49\x3f\x48\x06\x42\x78\xe2\xce\x5b\x10\x07\x00\x51\xf0\x6b\x3f\xdb\xb0\xdc\x7c\x4d\xdc\xb5\xeb\xfe\x32\xda\xf8\x10\x47\xfe\xd0\xd9\xb4\xe0\xd7\x0c\x0e\xc7\xf5\x7e\x96\xf8\x5e\x19\x0c\xec\xb5\xad\x17\x58\x29\x63\x36\xaa\xd8\x0d\xaf\x63\xc4\x65\xa7\xd7\x38\x90\xae\xd0\x90\x8d\xdc\x0c\x2f\xf1\xa2\x9f\xb1\x6f\x50\x3e\x29\xb3\x18\x7a\x5d\x1f\xf7\x31\x7c\x17\xf9\xff\xec\x74\x4f\x00\x11\xe9\x13\x64\x35\xa4\x74\x76\x86\x93\x00\x5e\xae\x8e\x9a\xc7\x10\x4e\x0d\xa4\x13\x30\xfb\xf0\x90\x85\x38\x0c\x79\x95\x47\xe8\x02\xc7\xd3\xd1\x4d\x8f\xbe\x8f\xfc\x49\x6d\xf0\xa4\xab\x13\xe8\x6c\x77\x47\x0b\x63\x36\xb1\xc1\x58\x1b\x19\x70\x80\xdf\x01\x00\x00\xff\xff\x1d\x7b\x64\x11\xa8\x04\x00\x00")

func templatesGoMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoMainGo,
		"templates/go/main.go",
	)
}

func templatesGoMainGo() (*asset, error) {
	bytes, err := templatesGoMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/main.go", size: 1192, mode: os.FileMode(0644), modTime: time.Unix(1709927928, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x5c, 0x88, 0xf8, 0x59, 0x56, 0x65, 0x5b, 0x27, 0x51, 0x7d, 0x1, 0x6, 0xa5, 0xb2, 0xd2, 0x43, 0x83, 0x61, 0xdb, 0xac, 0xe5, 0x85, 0x3b, 0xe4, 0x29, 0xd7, 0x8e, 0x74, 0x43, 0x92, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/go/Dockerfile":               templatesGoDockerfile,
	"templates/go/function/dummy.go":        templatesGoFunctionDummyGo,
	"templates/go/function/handler.go.tmpl": templatesGoFunctionHandlerGoTmpl,
	"templates/go/go.mod":                   templatesGoGoMod,
	"templates/go/go.sum":                   templatesGoGoSum,
	"templates/go/main.go":                  templatesGoMainGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"go": {nil, map[string]*bintree{
			"Dockerfile": {templatesGoDockerfile, map[string]*bintree{}},
			"function": {nil, map[string]*bintree{
				"dummy.go":        {templatesGoFunctionDummyGo, map[string]*bintree{}},
				"handler.go.tmpl": {templatesGoFunctionHandlerGoTmpl, map[string]*bintree{}},
			}},
			"go.mod":  {templatesGoGoMod, map[string]*bintree{}},
			"go.sum":  {templatesGoGoSum, map[string]*bintree{}},
			"main.go": {templatesGoMainGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
